From 00a7c19911071127d56e3037b4f610690458a0ea Mon Sep 17 00:00:00 2001
From: padmashree mandri <padmashree.mandri@intel.com>
Date: Sun, 2 Feb 2025 11:02:37 +0000
Subject: [PATCH] Update btaudio card params

This patch adds changes to update audio parameters
for btaudio card.

Tracked-On: OAM-127846
Signed-off-by: padmashree mandri <padmashree.mandri@intel.com>
---
 alsa_utils/alsa_device_proxy.c | 47 ++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/alsa_utils/alsa_device_proxy.c b/alsa_utils/alsa_device_proxy.c
index 5a436970..9fb9b983 100644
--- a/alsa_utils/alsa_device_proxy.c
+++ b/alsa_utils/alsa_device_proxy.c
@@ -33,6 +33,7 @@
 
 #define DEFAULT_PERIOD_SIZE     1024
 
+
 #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
 
 // These must use the same clock. If we change ALSA clock to real time, the system
@@ -166,19 +167,56 @@ int proxy_prepare_from_default_config(alsa_device_proxy * proxy,
 
 int proxy_open(alsa_device_proxy * proxy)
 {
+    char card_path[] ="/proc/asound";
+    char card_name[] ="card";
+    int card_number = proxy->profile->card;
+    char card_num[2];
+    char card_path_1[30];
+    char str[100];
+    sprintf(card_num, "%d", card_number);
+    sprintf(card_path_1, "%s%s%s%s","/proc/asound/",card_name, card_num,"/id");
+    FILE *p=fopen(card_path_1, "r");
+         if (p == NULL) {
+        ALOGE("Unable to open file \n");
+    }
+    if (fscanf(p, "%s", str) == 1) {
+        ALOGV("The first string in the file is: %s\n", str);
+    } else {
+        ALOGV("No string found in the file\n");
+    }
+   if(strcmp(str,"btaudiosource") == 0) {
+                    ALOGE("btaudio card is picked");
+		    proxy->alsa_config.channels = 1;
+                    proxy->alsa_config.rate = 8000;
+		    proxy->alsa_config.period_size = 240;
+		    proxy->alsa_config.period_count = 5;
+		    proxy->alsa_config.start_threshold=0;
+		    proxy->alsa_config.stop_threshold=0;
+		    proxy->alsa_config.silence_threshold=0;
+		    proxy->alsa_config.silence_size=0;
+		    proxy->alsa_config.avail_min=1;
+    }
+
     const alsa_device_profile* profile = proxy->profile;
     ALOGD("proxy_open(card:%d device:%d %s)", profile->card, profile->device,
           profile->direction == PCM_OUT ? "PCM_OUT" : "PCM_IN");
 
+    ALOGD("Opening Card with  channel %d rate:%d period_size:%d period_count:%d",
+		    proxy->alsa_config.channels, proxy->alsa_config.rate,
+		    proxy->alsa_config.period_size,  proxy->alsa_config.period_count);
     if (profile->card < 0 || profile->device < 0) {
+        ALOGE("No audio card found");
         return -EINVAL;
     }
 
     proxy->pcm = pcm_open(profile->card, profile->device,
             profile->direction | ALSA_CLOCK_TYPE, &proxy->alsa_config);
     if (proxy->pcm == NULL) {
+        ALOGE("PCM open failed");
         return -ENOMEM;
     }
+    else
+        ALOGI("PCM open successful");
 
     if (!pcm_is_ready(proxy->pcm)) {
         ALOGE("  proxy_open() pcm_is_ready() failed: %s", pcm_get_error(proxy->pcm));
@@ -318,10 +356,15 @@ int proxy_write(alsa_device_proxy * proxy, const void *data, unsigned int count)
 int proxy_write_with_retries(
         alsa_device_proxy * proxy, const void *data, unsigned int count, int tries)
 {
+
     while (true) {
         --tries;
+        ALOGD("%s:Channel %d Rate:%d period size:%d period count:%d", __func__,
+	     proxy->alsa_config.channels, proxy->alsa_config.rate,
+	     proxy->alsa_config.period_size, proxy->alsa_config.period_count);
         const int ret = pcm_write(proxy->pcm, data, count);
         if (ret == 0) {
+	    ALOGV("proxy write successfull");
             proxy->transferred += count / proxy->frame_size;
             return 0;
         } else if (tries > 0 && (ret == -EIO || ret == -EAGAIN)) {
@@ -340,8 +383,12 @@ int proxy_read_with_retries(alsa_device_proxy * proxy, void *data, unsigned int
 {
     while (true) {
         --tries;
+        ALOGD("%s: Channel %d Rate:%d period size:%d period count:%d", __func__,
+             proxy->alsa_config.channels, proxy->alsa_config.rate,
+	     proxy->alsa_config.period_size,  proxy->alsa_config.period_count);
         const int ret = pcm_read(proxy->pcm, data, count);
         if (ret == 0) {
+	    ALOGD("proxy read successfull");
             proxy->transferred += count / proxy->frame_size;
             return 0;
         } else if (tries > 0 && (ret == -EIO || ret == -EAGAIN)) {
-- 
2.34.1

